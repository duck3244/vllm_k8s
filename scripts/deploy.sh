#!/bin/bash
# scripts/deploy.sh
# vLLM API ÏÑúÎ≤Ñ Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏

set -e

# ÏÉâÍπî Ï†ïÏùò
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Î°úÍ∑∏ Ìï®Ïàò
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${PURPLE}[STEP]${NC} $1"
}

# Í∏∞Î≥∏ ÏÑ§Ï†ï
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
DEPLOY_ENV=${1:-production}
SERVICE_NAME="vllm-api"
DEPLOY_USER=${DEPLOY_USER:-$(whoami)}
DEPLOY_HOST=${DEPLOY_HOST:-localhost}
DEPLOY_PORT=${DEPLOY_PORT:-8000}
BACKUP_DIR="$PROJECT_ROOT/backups"

# ÎèÑÏõÄÎßê Ìï®Ïàò
show_help() {
    cat << EOF
ÏÇ¨Ïö©Î≤ï: $0 [ÌôòÍ≤Ω] [ÏòµÏÖò]

ÌôòÍ≤Ω:
  production    ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤Ω Î∞∞Ìè¨ (Í∏∞Î≥∏Í∞í)
  staging       Ïä§ÌÖåÏù¥Ïßï ÌôòÍ≤Ω Î∞∞Ìè¨
  development   Í∞úÎ∞ú ÌôòÍ≤Ω Î∞∞Ìè¨

ÏòµÏÖò:
  --host HOST          Î∞∞Ìè¨ Ìò∏Ïä§Ìä∏ (Í∏∞Î≥∏Í∞í: localhost)
  --port PORT          ÏÑúÎπÑÏä§ Ìè¨Ìä∏ (Í∏∞Î≥∏Í∞í: 8000)
  --user USER          Î∞∞Ìè¨ ÏÇ¨Ïö©Ïûê (Í∏∞Î≥∏Í∞í: ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê)
  --backup            Î∞∞Ìè¨ Ï†Ñ Î∞±ÏóÖ ÏÉùÏÑ±
  --no-test           ÌÖåÏä§Ìä∏ Í±¥ÎÑàÎõ∞Í∏∞
  --rollback          Ïù¥Ï†Ñ Î≤ÑÏ†ÑÏúºÎ°ú Î°§Î∞±
  --docker            Docker Ïª®ÌÖåÏù¥ÎÑàÎ°ú Î∞∞Ìè¨
  --k8s               KubernetesÎ°ú Î∞∞Ìè¨
  --help              Ïù¥ ÎèÑÏõÄÎßê ÌëúÏãú

ÏòàÏãú:
  $0 production --host 192.168.1.100 --backup
  $0 staging --docker
  $0 --rollback
EOF
}

# Î™ÖÎ†πÌñâ Ïù∏Ïàò ÌååÏã±
BACKUP=false
NO_TEST=false
ROLLBACK=false
DOCKER_DEPLOY=false
K8S_DEPLOY=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --host)
            DEPLOY_HOST="$2"
            shift 2
            ;;
        --port)
            DEPLOY_PORT="$2"
            shift 2
            ;;
        --user)
            DEPLOY_USER="$2"
            shift 2
            ;;
        --backup)
            BACKUP=true
            shift
            ;;
        --no-test)
            NO_TEST=true
            shift
            ;;
        --rollback)
            ROLLBACK=true
            shift
            ;;
        --docker)
            DOCKER_DEPLOY=true
            shift
            ;;
        --k8s)
            K8S_DEPLOY=true
            shift
            ;;
        --help)
            show_help
            exit 0
            ;;
        *)
            if [[ "$1" =~ ^(production|staging|development)$ ]]; then
                DEPLOY_ENV="$1"
            else
                log_error "Ïïå Ïàò ÏóÜÎäî ÏòµÏÖò: $1"
                show_help
                exit 1
            fi
            shift
            ;;
    esac
done

log_info "üöÄ vLLM API ÏÑúÎ≤Ñ Î∞∞Ìè¨ ÏãúÏûë"
log_info "Î∞∞Ìè¨ ÌôòÍ≤Ω: $DEPLOY_ENV"
log_info "Î∞∞Ìè¨ Ìò∏Ïä§Ìä∏: $DEPLOY_HOST:$DEPLOY_PORT"
log_info "Î∞∞Ìè¨ ÏÇ¨Ïö©Ïûê: $DEPLOY_USER"

cd "$PROJECT_ROOT"

# Î°§Î∞± Ï≤òÎ¶¨
if [ "$ROLLBACK" = true ]; then
    log_step "üîÑ Ïù¥Ï†Ñ Î≤ÑÏ†ÑÏúºÎ°ú Î°§Î∞±"
    
    if [ ! -d "$BACKUP_DIR" ]; then
        log_error "Î∞±ÏóÖ ÎîîÎ†âÌÜ†Î¶¨Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§: $BACKUP_DIR"
        exit 1
    fi
    
    # ÏµúÏã† Î∞±ÏóÖ Ï∞æÍ∏∞
    LATEST_BACKUP=$(ls -t "$BACKUP_DIR" | head -n 1)
    if [ -z "$LATEST_BACKUP" ]; then
        log_error "Î∞±ÏóÖ ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."
        exit 1
    fi
    
    log_info "Î°§Î∞±Ìï† Î∞±ÏóÖ: $LATEST_BACKUP"
    
    # ÏÑúÎπÑÏä§ Ï§ëÏßÄ
    sudo systemctl stop "$SERVICE_NAME" || log_warning "ÏÑúÎπÑÏä§ Ï§ëÏßÄ Ïã§Ìå®"
    
    # Î∞±ÏóÖ Î≥µÏõê
    tar -xzf "$BACKUP_DIR/$LATEST_BACKUP" -C "$(dirname "$PROJECT_ROOT")"
    
    # ÏÑúÎπÑÏä§ ÏãúÏûë
    sudo systemctl start "$SERVICE_NAME"
    
    log_success "Î°§Î∞± ÏôÑÎ£å"
    exit 0
fi

# Î∞∞Ìè¨ Ï†Ñ Í≤ÄÏ¶ù
log_step "üîç Î∞∞Ìè¨ Ï†Ñ Í≤ÄÏ¶ù"

# Git Ï†ÄÏû•ÏÜå ÌôïÏù∏
if [ ! -d ".git" ]; then
    log_warning "Git Ï†ÄÏû•ÏÜåÍ∞Ä ÏïÑÎãôÎãàÎã§."
else
    # Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÌôïÏù∏
    if [ -n "$(git status --porcelain)" ]; then
        log_warning "Ïª§Î∞ãÎêòÏßÄ ÏïäÏùÄ Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏûàÏäµÎãàÎã§."
        git status --short
        read -p "Í≥ÑÏÜç ÏßÑÌñâÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Î∞∞Ìè¨Î•º Ï∑®ÏÜåÌï©ÎãàÎã§."
            exit 0
        fi
    fi
    
    # ÌòÑÏû¨ Î∏åÎûúÏπò ÌôïÏù∏
    CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    log_info "ÌòÑÏû¨ Î∏åÎûúÏπò: $CURRENT_BRANCH"
    
    if [ "$DEPLOY_ENV" = "production" ] && [ "$CURRENT_BRANCH" != "main" ] && [ "$CURRENT_BRANCH" != "master" ]; then
        log_warning "ÌîÑÎ°úÎçïÏÖò Î∞∞Ìè¨Îäî main/master Î∏åÎûúÏπòÏóêÏÑúÎßå Í∂åÏû•Îê©ÎãàÎã§."
        read -p "Í≥ÑÏÜç ÏßÑÌñâÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Î∞∞Ìè¨Î•º Ï∑®ÏÜåÌï©ÎãàÎã§."
            exit 0
        fi
    fi
fi

# ÌôòÍ≤Ω ÏÑ§Ï†ï ÌååÏùº ÌôïÏù∏
CONFIG_FILE="config/${DEPLOY_ENV}_config.yaml"
if [ ! -f "$CONFIG_FILE" ]; then
    log_warning "ÌôòÍ≤Ω ÏÑ§Ï†ï ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§: $CONFIG_FILE"
    log_info "Í∏∞Î≥∏ ÏÑ§Ï†ï ÌååÏùºÏùÑ ÏÇ¨Ïö©Ìï©ÎãàÎã§: config/server_config.yaml"
    CONFIG_FILE="config/server_config.yaml"
fi

# ÌÖåÏä§Ìä∏ Ïã§Ìñâ
if [ "$NO_TEST" = false ]; then
    log_step "üß™ ÌÖåÏä§Ìä∏ Ïã§Ìñâ"
    
    # Í∞ÄÏÉÅÌôòÍ≤Ω ÌôúÏÑ±Ìôî
    if [ -f "venv/bin/activate" ]; then
        source venv/bin/activate
    fi
    
    # Îã®ÏúÑ ÌÖåÏä§Ìä∏ Ïã§Ìñâ
    if ! python tests/run_tests.py --type unit; then
        log_error "Îã®ÏúÑ ÌÖåÏä§Ìä∏ Ïã§Ìå®"
        exit 1
    fi
    
    # ÌÜµÌï© ÌÖåÏä§Ìä∏ Ïã§Ìñâ
    if ! python tests/run_tests.py --type integration; then
        log_error "ÌÜµÌï© ÌÖåÏä§Ìä∏ Ïã§Ìå®"
        exit 1
    fi
    
    log_success "Î™®Îì† ÌÖåÏä§Ìä∏ ÌÜµÍ≥º"
fi

# Î∞±ÏóÖ ÏÉùÏÑ±
if [ "$BACKUP" = true ]; then
    log_step "üíæ Î∞∞Ìè¨ Ï†Ñ Î∞±ÏóÖ ÏÉùÏÑ±"
    
    mkdir -p "$BACKUP_DIR"
    
    BACKUP_NAME="vllm-api-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
    BACKUP_PATH="$BACKUP_DIR/$BACKUP_NAME"
    
    tar -czf "$BACKUP_PATH" \
        --exclude=venv \
        --exclude=__pycache__ \
        --exclude=.git \
        --exclude=htmlcov \
        --exclude=.pytest_cache \
        --exclude=logs \
        --exclude=models \
        -C "$(dirname "$PROJECT_ROOT")" \
        "$(basename "$PROJECT_ROOT")"
    
    log_success "Î∞±ÏóÖ ÏÉùÏÑ± ÏôÑÎ£å: $BACKUP_PATH"
    
    # Ïò§ÎûòÎêú Î∞±ÏóÖ Ï†ïÎ¶¨ (ÏµúÍ∑º 5Í∞úÎßå Ïú†ÏßÄ)
    ls -t "$BACKUP_DIR"/*.tar.gz | tail -n +6 | xargs -r rm
    log_info "Ïò§ÎûòÎêú Î∞±ÏóÖ Ï†ïÎ¶¨ ÏôÑÎ£å"
fi

# Docker Î∞∞Ìè¨
if [ "$DOCKER_DEPLOY" = true ]; then
    log_step "üê≥ Docker Ïª®ÌÖåÏù¥ÎÑà Î∞∞Ìè¨"
    
    # Dockerfile ÌôïÏù∏
    if [ ! -f "Dockerfile" ]; then
        log_error "DockerfileÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§."
        exit 1
    fi
    
    # Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
    IMAGE_NAME="vllm-api:${DEPLOY_ENV}"
    log_info "Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú: $IMAGE_NAME"
    
    docker build -t "$IMAGE_NAME" .
    
    # Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑà Ï§ëÏßÄ Î∞è Ï†úÍ±∞
    if docker ps -q --filter "name=$SERVICE_NAME" | grep -q .; then
        log_info "Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑà Ï§ëÏßÄ Ï§ë..."
        docker stop "$SERVICE_NAME"
        docker rm "$SERVICE_NAME"
    fi
    
    # ÏÉà Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ
    log_info "ÏÉà Ïª®ÌÖåÏù¥ÎÑà ÏãúÏûë..."
    docker run -d \
        --name "$SERVICE_NAME" \
        --restart unless-stopped \
        -p "$DEPLOY_PORT:8000" \
        -v "$PROJECT_ROOT/models:/app/models" \
        -v "$PROJECT_ROOT/logs:/app/logs" \
        -v "$PROJECT_ROOT/config:/app/config" \
        --gpus all \
        "$IMAGE_NAME"
    
    log_success "Docker Î∞∞Ìè¨ ÏôÑÎ£å"
    
# Kubernetes Î∞∞Ìè¨
elif [ "$K8S_DEPLOY" = true ]; then
    log_step "‚ò∏Ô∏è Kubernetes Î∞∞Ìè¨"
    
    # Kubernetes Îß§ÎãàÌéòÏä§Ìä∏ ÌôïÏù∏
    if [ ! -d "k8s" ]; then
        log_error "Kubernetes Îß§ÎãàÌéòÏä§Ìä∏ ÎîîÎ†âÌÜ†Î¶¨Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§: k8s/"
        exit 1
    fi
    
    # ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ ÏÉùÏÑ±
    kubectl create namespace vllm-api --dry-run=client -o yaml | kubectl apply -f -
    
    # ÏÑ§Ï†ï Îßµ ÏóÖÎç∞Ïù¥Ìä∏
    if [ -f "$CONFIG_FILE" ]; then
        kubectl create configmap vllm-config \
            --from-file="$CONFIG_FILE" \
            --namespace=vllm-api \
            --dry-run=client -o yaml | kubectl apply -f -
    fi
    
    # Î∞∞Ìè¨ Ï†ÅÏö©
    kubectl apply -f k8s/ --namespace=vllm-api
    
    # Î∞∞Ìè¨ ÏÉÅÌÉú ÌôïÏù∏
    kubectl rollout status deployment/vllm-api --namespace=vllm-api
    
    log_success "Kubernetes Î∞∞Ìè¨ ÏôÑÎ£å"
    
# ÏùºÎ∞ò ÏÑúÎ≤Ñ Î∞∞Ìè¨
else
    log_step "üñ•Ô∏è ÏÑúÎ≤Ñ Î∞∞Ìè¨"
    
    # Í∞ÄÏÉÅÌôòÍ≤Ω ÌôúÏÑ±Ìôî
    if [ -f "venv/bin/activate" ]; then
        source venv/bin/activate
    fi
    
    # ÏùòÏ°¥ÏÑ± ÏóÖÎç∞Ïù¥Ìä∏
    log_info "ÏùòÏ°¥ÏÑ± ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë..."
    pip install -r requirements.txt --upgrade
    
    # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò (ÌïÑÏöîÌïú Í≤ΩÏö∞)
    # python manage.py migrate
    
    # Ï†ïÏ†Å ÌååÏùº ÏàòÏßë (ÌïÑÏöîÌïú Í≤ΩÏö∞)
    # python manage.py collectstatic --noinput
    
    # systemd ÏÑúÎπÑÏä§ ÌååÏùº ÏÉùÏÑ±/ÏóÖÎç∞Ïù¥Ìä∏
    SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"
    
    if [ ! -f "$SERVICE_FILE" ]; then
        log_info "systemd ÏÑúÎπÑÏä§ ÌååÏùº ÏÉùÏÑ±..."
        
        sudo tee "$SERVICE_FILE" > /dev/null << EOF
[Unit]
Description=vLLM API Server
After=network.target

[Service]
Type=exec
User=$DEPLOY_USER
Group=$DEPLOY_USER
WorkingDirectory=$PROJECT_ROOT
Environment=PATH=$PROJECT_ROOT/venv/bin
ExecStart=$PROJECT_ROOT/venv/bin/python scripts/start_server.py --mode prod
ExecReload=/bin/kill -HUP \$MAINPID
Restart=always
RestartSec=5
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF
        
        sudo systemctl daemon-reload
        sudo systemctl enable "$SERVICE_NAME"
        log_success "systemd ÏÑúÎπÑÏä§ ÌååÏùº ÏÉùÏÑ± ÏôÑÎ£å"
    fi
    
    # ÏÑúÎπÑÏä§ Ïû¨ÏãúÏûë
    log_info "ÏÑúÎπÑÏä§ Ïû¨ÏãúÏûë Ï§ë..."
    sudo systemctl restart "$SERVICE_NAME"
    
    # ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏
    sleep 3
    if sudo systemctl is-active --quiet "$SERVICE_NAME"; then
        log_success "ÏÑúÎπÑÏä§Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏãúÏûëÎêòÏóàÏäµÎãàÎã§."
    else
        log_error "ÏÑúÎπÑÏä§ ÏãúÏûë Ïã§Ìå®"
        sudo systemctl status "$SERVICE_NAME"
        exit 1
    fi
fi

# Î∞∞Ìè¨ ÌõÑ Í≤ÄÏ¶ù
log_step "‚úÖ Î∞∞Ìè¨ ÌõÑ Í≤ÄÏ¶ù"

# Ìó¨Ïä§ Ï≤¥ÌÅ¨
log_info "Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÏàòÌñâ Ï§ë..."
for i in {1..30}; do
    if curl -f -s "http://$DEPLOY_HOST:$DEPLOY_PORT/health" > /dev/null; then
        log_success "Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÏÑ±Í≥µ"
        break
    fi
    
    if [ $i -eq 30 ]; then
        log_error "Ìó¨Ïä§ Ï≤¥ÌÅ¨ Ïã§Ìå® - ÏÑúÎπÑÏä§Í∞Ä ÏùëÎãµÌïòÏßÄ ÏïäÏäµÎãàÎã§."
        exit 1
    fi
    
    log_info "Ìó¨Ïä§ Ï≤¥ÌÅ¨ Ïû¨ÏãúÎèÑ ($i/30)..."
    sleep 2
done

# API Í∏∞Î≥∏ ÌÖåÏä§Ìä∏
log_info "API Í∏∞Î≥∏ ÌÖåÏä§Ìä∏..."
API_RESPONSE=$(curl -s "http://$DEPLOY_HOST:$DEPLOY_PORT/")
if echo "$API_RESPONSE" | grep -q "vLLM API"; then
    log_success "API ÏùëÎãµ ÌôïÏù∏"
else
    log_warning "API ÏùëÎãµÏù¥ ÏòàÏÉÅÍ≥º Îã§Î¶ÖÎãàÎã§."
fi

# Î∞∞Ìè¨ Ï†ïÎ≥¥ Í∏∞Î°ù
DEPLOY_LOG="$PROJECT_ROOT/logs/deploy.log"
mkdir -p "$(dirname "$DEPLOY_LOG")"

cat >> "$DEPLOY_LOG" << EOF
=== Î∞∞Ìè¨ Î°úÍ∑∏ ===
ÎÇ†Ïßú: $(date)
ÌôòÍ≤Ω: $DEPLOY_ENV
Ìò∏Ïä§Ìä∏: $DEPLOY_HOST:$DEPLOY_PORT
ÏÇ¨Ïö©Ïûê: $DEPLOY_USER
Git Ïª§Î∞ã: $(git rev-parse HEAD 2>/dev/null || echo "N/A")
Î∏åÎûúÏπò: $(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "N/A")
Î∞∞Ìè¨ Î∞©Ïãù: $([ "$DOCKER_DEPLOY" = true ] && echo "Docker" || [ "$K8S_DEPLOY" = true ] && echo "Kubernetes" || echo "ÏÑúÎ≤Ñ")
ÏÉÅÌÉú: ÏÑ±Í≥µ
================

EOF

# ÏôÑÎ£å Î©îÏãúÏßÄ
echo ""
log_success "üéâ Î∞∞Ìè¨ ÏôÑÎ£å!"
echo ""
echo "ÏÑúÎπÑÏä§ Ï†ïÎ≥¥:"
echo "  - ÌôòÍ≤Ω: $DEPLOY_ENV"
echo "  - Ï£ºÏÜå: http://$DEPLOY_HOST:$DEPLOY_PORT"
echo "  - API Î¨∏ÏÑú: http://$DEPLOY_HOST:$DEPLOY_PORT/docs"
echo ""

if [ "$DOCKER_DEPLOY" = true ]; then
    echo "Docker Î™ÖÎ†πÏñ¥:"
    echo "  - Î°úÍ∑∏ ÌôïÏù∏: docker logs $SERVICE_NAME"
    echo "  - Ïª®ÌÖåÏù¥ÎÑà Ï§ëÏßÄ: docker stop $SERVICE_NAME"
    echo "  - Ïª®ÌÖåÏù¥ÎÑà Ïû¨ÏãúÏûë: docker restart $SERVICE_NAME"
elif [ "$K8S_DEPLOY" = true ]; then
    echo "Kubernetes Î™ÖÎ†πÏñ¥:"
    echo "  - ÌååÎìú ÏÉÅÌÉú: kubectl get pods -n vllm-api"
    echo "  - Î°úÍ∑∏ ÌôïÏù∏: kubectl logs -f deployment/vllm-api -n vllm-api"
    echo "  - ÏÑúÎπÑÏä§ ÌôïÏù∏: kubectl get svc -n vllm-api"
else
    echo "ÏãúÏä§ÌÖú Î™ÖÎ†πÏñ¥:"
    echo "  - ÏÑúÎπÑÏä§ ÏÉÅÌÉú: sudo systemctl status $SERVICE_NAME"
    echo "  - Î°úÍ∑∏ ÌôïÏù∏: sudo journalctl -u $SERVICE_NAME -f"
    echo "  - ÏÑúÎπÑÏä§ Ïû¨ÏãúÏûë: sudo systemctl restart $SERVICE_NAME"
fi

echo ""
log_info "Î∞∞Ìè¨Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! üöÄ"